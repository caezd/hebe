// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

/// Make a BEM based selector a little more friendly
@mixin e($element) {
    &__#{$element} {
        @content;
    }
}
/// Make a BEM based selector a little more friendly
@mixin c($children) {
    &-#{$children} {
        @content;
    }
}
/// Make a BEM based selector a little more friendly
@mixin m($modifier) {
    &--#{$modifier} {
        @content;
    }
}

@mixin diffuse($size, $color, $multiply) {
    box-shadow: diffuse-shadows($size, $color, $multiply);
}

@mixin absoluteCenter {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin parallax($t, $p: 1) {
    $s: (1 + ($t * -1) / $p);
    transform: translateZ(#{$t}px) scale($s + 0.2);
    // 1 + (translateZ * -1) / perspective
}

@mixin respond-to($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}
$breakpoints: (
    "small": (
        min-width: 600px,
    ),
    "medium": (
        min-width: 900px,
    ),
    "large": (
        min-width: 1112px,
    ),
) !default;
